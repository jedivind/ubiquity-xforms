<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!--
  * Copyright (C) 2008 Backplane Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *  http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
-->
<html 
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:xf="http://www.w3.org/2002/xforms"
>
	<head>
		<title>Appearance</title>
		<script type="text/javascript" src="../../../ubiquity-loader.js" >/**/</script>
		
		<style type="text/css">
			body {
				font-family			:	"Trebuchet MS", Verdana, Helvetica, sans-serif;
			}
			
			xf\:select1 {
				display		:	block;
				margin-top	:	10px;
			}
		</style>
	</head>
	<body>
		<xf:model id="mdlPersonalDetails">
			<xf:instance>
				<instanceData>
					<theGender ></theGender>
					<theCountry ></theCountry>
				</instanceData>
			</xf:instance>
		</xf:model>
		<xf:model id="mdlISO3166en">
			<xf:instance src="iso3166en.xml" ></xf:instance>
		</xf:model>
		<h1>Appearance</h1>
		<p>
			When building XForms forms, it is important to not restrict your approach to a form simply to
			a visual representation. For example, when dealing with a list of items from which your users
			should select one, try not to think in terms of drop-boxes and list-boxes, since these input
			techniques may not be available on some of the devices that will be accessing the form. A
			voice-operated system, for example, may read the choices to a user and then allow them to select
			one (the aural equivalent of a list-box) or the system may indicate that a user needs to say
			something in order to access the list (the aural equivalent to a combo-box). 
		</p>
		<p>
			XForms provides points at which the forms designer can give clues to the processor as to the
			most suitable manner to present some information. For example, if you were asking a user to
			indicate their gender, then since the list is very short it would be helpful to show all the
			options at the same time. We can indicate this with the <b>appearance</b> attribute. (More
			information about the appearance attribute can be found
			<a href="http://www.w3.org/TR/2002/CR-xforms-20021112/slice8.html#attrs-ui-common">here</a>.
		</p>
		<p>
			In this example we show the difference between appearance="full" and appearance="minimal". Since
			the list is very short then the designer would most likely choose "full" for their users (note
			that if you change one control the other changes to match):
		</p>
		
		<xf:select1 model="mdlPersonalDetails" ref="theGender" appearance="full">
			<xf:label>Please select your gender (appearance="full"):</xf:label>
			<xf:hint>Choose the gender that you feel best describes you</xf:hint>
			<xf:item>
				<xf:label>Male</xf:label>
				<xf:value>m</xf:value>
			</xf:item>
			<xf:item>
				<xf:label>Female</xf:label>
				<xf:value>f</xf:value>
			</xf:item>
		</xf:select1>

		<xf:select1 model="mdlPersonalDetails" ref="theGender" appearance="minimal">
			<xf:label>Please select your gender (appearance="minimal"):</xf:label>
			<xf:hint>Choose the gender that you feel best describes you</xf:hint>
			<xf:item>
				<xf:label>Male</xf:label>
				<xf:value>m</xf:value>
			</xf:item>
			<xf:item>
				<xf:label>Female</xf:label>
				<xf:value>f</xf:value>
			</xf:item>
		</xf:select1>
		
		<p>
			Note that on some devices both "full" and "minimal" may render exactly the same. A mobile phone,
			for example, may show both approaches in the same way. This does not matter though, since the
			forms designer has indicated which is optimal for the user, and the XForms processor is then in
			a position to use that information to do the best it can.
		</p>
		<p>
			The mirror situation to the short list would be the long one, where the form designer knows that
			the list may well be too long to show all choices. An example may be a list of countries or
			currencies, that the user is to choose when conducting an ecommerce transaction.
		</p>
		<p>
			In this example we have a list of countries rendered with appearance="minimal", so that the list
			does not take up too much 'space' within the user interface:
		</p>
		
		<xf:select1 model="mdlPersonalDetails" ref="theCountry" appearance="minimal">
			<xf:label>Select your country</xf:label>
			<xf:hint>Choose a country</xf:hint>
			<xf:itemset model="mdlISO3166en" nodeset="country">
				<xf:label ref="name" ></xf:label>
				<xf:value ref="code" ></xf:value>
			</xf:itemset>
		</xf:select1>
		
		<p>
			The other alternative is to use appearance="compact", which still limits the amount of space used,
			but will show more options:
		</p>
		
		<xf:select1 model="mdlPersonalDetails" ref="theCountry" appearance="compact">
			<xf:label>Select your country</xf:label>
			<xf:hint>Choose a country</xf:hint>
			<xf:itemset model="mdlISO3166en" nodeset="country">
				<xf:label ref="name" ></xf:label>
				<xf:value ref="code" ></xf:value>
			</xf:itemset>
		</xf:select1>
		
		<p>
			Finally, since you probably want to see it - even if you wouldn't use it -
			<a href="appearance-full.html">click here</a> is to see list using appearance="full".
		</p> 
	</body>
</html>
