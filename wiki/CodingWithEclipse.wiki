#summary The mechanics of the development/code contribution with Eclipse and Subversive.

= Overview =

Please see the [http://code.google.com/p/ubiquity-xforms/wiki/CodingGuidelines Coding Guidelines] and in particular the [http://code.google.com/p/ubiquity/wiki/CodingUsingSvn development process for the Ubiquity project as a whole], which contains both an overview and detailed explanation of the development process as well as SVN command-line instructions.

This page provides the corresponding mechanics for using Eclipse and the Subversive plugin, rather than the command-line, to achieve the development process above.

Contributors have the option of working on the trunk code, but as mentioned all over the place *do not commit* without a code review.

The mechanics below assume you have SVN commit access.  The instructions are similar if you don't have commit access.  You can get the trunk using an http request, rather than https.  Then, once you use "Create Patch", you can email that to the contributor mailing list for a code review.

The mechanics below describe how to work without using a branch.  The process is similar when you do have a branch.  The main difference is that you have to update your branch with the trunk before asking for a code review (rather than updating your local trunk copy before asking for a code review).

Finally, at the end of this page, there are some instructions on setting up Subversive in Eclipse for use in the Ubiquity XForms project.

= Contribution Mechanics (without branching) =

  # *When you want to make changes, work on trunk but DO NOT COMMIT*
    * To add a file, use Team | Add to Version Control... to add the file LOCALLY
    * To undo local changes to a file and go back to the server copy, use Team | Revert...
  # *When you want a code review, you need to make a copy of your changes onto a copy of the trunk.*
    # Copy the trunk to a directory in your changes location
      # Go to SVN Repositories perspective
      # Right Click on the trunk, choose Refactor | Copy To...
      # Open the changes directory and click the subdirectory with your gmail name
      # Rename the copy using a name associated with the feature your changes implement. For reference below, let the name be *FEATURE-X*
      # Comment should just say that you are creating a copy to patch and review.
    # Get your new copy into your project workspace
      # Go back to Java Perspective and Right click Package Explorer
      # New | Project
      # SVN | Projects from SVN | Next >>
      # The URL/user name/password dialog should be skipped this time
      # Next View is "Select Resource"
        * Choose your new trunk copy named e.g. FEATURE-X from your changes directory
      # Next View is "Check out as".  Click Finish
        * This accepts "Check out... Using New Project Wizard", recursive checkout, no ignore
      # The "Select a wizard" dialog comes up
        # Choose General | Project and hit next
        # Project Name ux-FEATURE-X
        # Use default location and Click Finish
  # *Apply your trunk changes to your ux-FEATURE-X copy*
    # Right click the ubiquity-xforms trunk project
    # Team | Create Patch ...
    # Hit Finish (accepts putting patch on the clipboard)
      * Note that changes to true binary files must be handled *manually* because the patch system only handles text
      * Note that .xhtml files are of type application/xhtml+xml, which is being treated as binary by SVN.  However, if the only binary files that were modified are really text files, it may be possible to patch them automatically by hitting Next instead of Finish in this step, and then selecting the "Process Binary Resources" checkbox
    # Right click the ux-FEATURE-X project
    # Team | Apply Patch ...
    # Hit Finish (pulls from clipboard)
    # Right click the ux-FEATURE-X project
    # Team | Commit
    # Add a comment that begins *FOR REVIEW* and explain feature
    # After commit, you will be able to see a page for your revision
      * Go to ubiquity project and click the [http://code.google.com/p/ubiquity-xforms/source/checkout sources tab]
      * Click the changes link, and at or near the top should be your revision ({{{http://code.google.com/p/ubiquity-xforms/source/detail?r=NNNN}}})
      * The modifications can be viewed by expanding the trees OR to get a side-by-side diff comparison, don't click "Diff"! Instead, click the file link, then click "Diff" at the top right corner
    # Do a non-rated review of your code.  In the general comments, put *CODE REVIEW NEEDED* and add any line-by-line comments that may be needed to help reviewers understand your code.
      * This will send an email to the ubiquity-xforms-eng@googlegroups.com with a subject that includes your *rNNNN* and a body that includes CODE REVIEW NEEDED, which can be used to filter emails.
      * The typical review period is 48 hours. If you need a shorter review period, send an email to ubiquity-xforms-eng@googlegroups.com with *URGENT* in the subject line and ask for quick reviews and also ask people to indicate if they don't intend to review (since you can't get a -1 from someone who doesn't review) 
    # At least one +1 review is needed before committing to trunk
      * A review can be +1 and can still request minor editorial changes needing no further review or identify issues that should be raised in the issue system once the code is committed.
      * A -1 review halts the commit until the reason for the -1 is resolved.  A -1 review requires a detailed technical justification, including what if anything can be done to mitigate or eliminate the concerns raised in the review.
      * A neutral review can be used to raise issues without advancing or impeding a trunk commit.
      * Ping list again if no +1 or -1 reviews within 48 hours
      * A +1, no -1's, and 48 hours are sufficient for a trunk commit
      * For URGENT requests, if a +1 is received, then ping the list to ask for a same day response to whether anyone else is planning a review.  If no response that day, then assume no further reviews are coming, and proceed with commit to trunk due to +1 received. 
      * Except for addressing minor editorial changes, a substantive change should spawn a new review copy by repeating the above process, in which case the current review copy should be deleted without committing to trunk.
  # *Committing changes to the trunk and deleting the review copy*
    # Ensure you have the favorable review(s) needed 
    # Right click the trunk project and use Team | Update first
    # Right click the trunk project and use Team | Commit...
    # Delete ux-FEATURE-X project from the package explorer
    # Go to SVN Repositories perspective
    # Right-click changes/ux-FEATURE-X folder and choose Delete

= Setting up Subversive for use in Ubiquity XForms =

  # *Install Subversive plugin* 
    # Visit http://www.eclipse.org/subversive
    # Click "Downloads" and follow the instructions (particulars in the following steps)
    # In Eclipse, choose menu Help | Software Updates
    # Click Available Software tab
    # Must install Subversive plugin
      * It's under the Ganymede Update Site (http://download.eclipse.org/release/ganymede)
      * Then, open up the Collaboration Tools
      * Choose the checkbox for Subversive SVN Team Provider (choose the incubation 0.7.3 release)
    # Must install checkbox for Subversive Connectors (incubation) as follows
      * Click "Add Site..."
      * Add the site indicated on the downloads site 
        * Click external site link (http://www.polarion.com/products/svn/subversive.php?src=eclipseproject)
        * Use update site http://www.polarion.org/projects/subversive/download/eclipse/2.0/update-site/
      * Open the Subversive SVN Connectors subtree
      * Choose the child Subversive SVN Connectors and SVN Kit 1.1.7 (the latter is marked optional, but it isn't)
    # Click Install...
  # *Environment set up*
    # Window | Preferences
    # General | Editors | Text Editors
      * Set "Displayed Tab width: 4" and check "Insert spaces for tabs"
    # General | Team | SVN | Properties Configuration
    # On Automatic Properties tab, click Add button to add each of the following
{{{
	    Filename template   Properties
	    *.pdf               svn:mime-type=application/pdf
	    *.png               svn:mime-type=image/png
	    *.gif               svn:mime-type=image/gif
	    *.jpg               svn:mime-type=image/jpeg
            *.html              svn:mime-type=text/html
            *.xhtml             svn:mime-type=application/xhtml+xml
            *.css               svn:mime-type=text/css
	    *.js                svn:eol-style=native
	    *.html              svn:eol-style=native
	    *.xhtml             svn:eol-style=native
            *.css               svn:eol-style=native
}}}
  # *Obtain a local copy of the project trunk*
    # Right-click Package Explorer
    # New | Project
    # SVN | Projects from SVN | Next >>
    # URL: https://ubiquity-xforms.googlecode.com/svn/
    # User: same as gmail login (boyerj@ca.ibm.com)
    # Password: Google code password, not gmail login password
      * Log in to the Google Code Project
      * Under source tab, there is a link to get your Google code password
    # Click Save Password and then Click Next
    # Next View is "Select Resource".  Choose trunk and click Finish 
      * (a branch could be selected here instead)
    # Next View is "Check out as".  Click Finish
      * This accepts "Check out... Using New Project Wizard", recursive checkout, no ignore
    # The "Select a wizard" dialog comes up
      # Choose General | Project and hit next
      # Project Name *ubiquity-xforms*
      # Use default location
      # Click Finish
  # *Make a "changes" directory for yourself*
    # Open the SVN Repositories perspective 
      * Window | Open Perspectives | Other... 
      * SVN Repository Exploring
    # Now make a code review directory for yourself in changes branch
      * Choose changes branch, then Right click and choose New | Folder
      * Use your gmail address for the folder name