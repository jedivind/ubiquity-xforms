#summary How to write an end-to-end test using Selenium.
#labels Phase-QA

= Introduction =

Blah blah.

= XForms 1.1 Test Suite =

The XForms 1.1 test suite comprises:

  * a file that lists all of the tests to run, in the form of links to 'driver pages';
  * a driver page for each test, which links to one or more individual test forms;
  * a set of individual test forms;

== List of tests to run ==

The top level list of XForms 1.1 tests to run is located at:
{{{
testsuite/W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/W3CTestSuite.html
}}}

This is currently being broken into individual chapters, such as:

{{{
testsuite/W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/TestSuiteChapter11.html
}}}

Each entry in the document is a link to driver file to be loaded, plus a title for the test. These entries appear as rows in a table:

{{{
<table id="suiteTable" cellpadding="1" cellspacing="1" border="1" class="selenium">
  <tbody>
    <tr>
      <td><b>XForms 1.1 Chapter 11 Test Suite</b></td>
    </tr>
    <tr><td><a href="./Chapt11/11.1/11.1.a.html">11.1.a ref attribute of submission element</a></td></tr>
    <tr><td><a href="./Chapt11/11.1/11.1.b.html">11.1.b bind attribute of submission element</a></td></tr>
    .
    .
    .
    <tr><td><a href="./Chapt11/11.11/11.11.4/11.11.4.b.html">11.11.4.b handling SOAP success response</a></td></tr>
  </tbody>
</table>
}}}

== Driver pages ==

Each driver page is an HTML file that contains a list of instructions that Selenium will understand (for more details see the [http://release.seleniumhq.org/selenium-core/0.8.0/reference.html Selenium Reference]). These are located in:

{{{
testsuite/W3C-XForms-1.1/Edition1/driverPages/SeleniumTests
}}}

The driver pages are broken down by chapter, and then section (and sometimes even sub-section). For example, test `11.1.n` would be in section `11.1` in chapter 11:

{{{
testsuite/W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/Chapt11/11.1/11.1.n.html
}}}

== Individual test forms ==

Each of the XForms 1.1 tests has an XForm located in a sub-directory of:

{{{
testsuite/W3C-XForms-1.1/Edition1
}}}

The tests are broken down by chapter, and then section (and sometimes even sub-section). For example, test `11.1.n` would be in section `11.1` in chapter 11:

{{{
testsuite/W3C-XForms-1.1/Edition1/Chapt11/11.1/11.1.n.xhtml
}}}

The forms are generated from the original W3C forms, located here:

{{{
Not sure yet!
}}}

To convert the files for use by UXF, run the following command:

{{{
testsuite/W3C-XForms-1.1/ant
}}}

This will run `ant` in the test suite directory, which will use the `build.xml` file to process each file in the test suite. (For information on installing `ant`, see WindowsBuildBotSlave.)

For each file `ant` will run the `ubiquityxforms.xsl` transformation, which does the following:

  * adds the UXF library loader script to the `head` element;
  * moves all `xf:model` elements that appear in the `head` to the `body`;
  * adds an `xf:output` to the end of the `body` to allow tests to detect when the form is ready.

This last step is provided by the following mark-up:

{{{
<xforms:output id="status" value="'ready'"></xforms:output>
}}}

= Writing a driver page =

The first step in a driver page will be to open the individual test form that will be controlled:

{{{
<tr>
  <td>open</td>
  <td>../../W3C-XForms-1.1/Edition1/Chapt11/11.1/11.1.n.xhtml</td>
  <td>&amp;nbsp;</td>
  <td>&amp;nbsp;</td>
</tr>
}}}

Once the form is loaded, UXF will initialise. We can't run any tests until this initialisation is complete, but each form should contain an XForms `output` control which can be used to detect that the UXF has fully initialised. So we use the UXF Selenium extension command `waitForXformsControlValue` to pause until the form is ready:

{{{
<tr>
  <td>waitForXformsControlValue</td>
  <td>xpath=//xforms:output[@id='status']</td>
  <td>ready</td>
  <td>&nbsp;</td>
</tr>
}}}

= Running the tests =

The Selenium driver file is at:

{{{
testsuite/selenium/core/TestRunner.html
}}}

To run the chapter 11 tests, for example, use the following:

{{{
testsuite/selenium/core/TestRunner.html?test=../../W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/TestSuiteChapter11.html
}}}

This opens Selenium so that you are ready to run tests individually or the entire suite.

To have Selenium load the tests and then automatically run all of them, add `auto=true`:

{{{
testsuite/selenium/core/TestRunner.html?auto=true&test=../../W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/TestSuiteChapter11.html
}}}

To have Selenium save the results of running the tests add `save=true` and `resultsUrl=filename`. For example:

{{{
testsuite/selenium/core/TestRunner.html?save=true&resultsUrl=..\..\xforms11-ff3-results.html&test=../../W3C-XForms-1.1/Edition1/driverPages/SeleniumTests/TestSuiteChapter11.html
}}}

To automatically close the browser after the tests have completed, add `close=true`. This is useful when running the tests from the command-line. For example, to load the chapter 11 tests in Firefox on Windows, run them automatically, save the results, and then close, we would use the following command:

{{{
"C:\Program Files\Mozilla Firefox\firefox.exe" "testsuite\selenium\core\TestRunner.html?test=..\..\W3C-XForms-1.1\Edition1\driverPages\SeleniumTests\TestSuiteChapter11.html&auto=true&save=true&resultsUrl=..\..\xforms11-ff3-results.html&close=true"
}}}

There are Windows batch files to do just this, at:
{{{
testsuite/xforms11-chapter11-ff3.bat
}}}

These files are designed to be run by Builbot Windows slaves (see WindowsBuildBotSlave).