#summary Adding Streamlined Syntax to Ubiquity XForms Library
#labels Feature,StreamLinedSyntax,WorkItem

= Introduction =

Add support of the [StorySimplifiedSyntax streamlined syntax] to the Ubiquity XForms's namespace

Questions/comments from Charlie:

1. Do we want to *require* a form element in order to create the model, submission, and instance?  I believe some use cases for streamlined syntax, particularly when used in the xforms namespace, won't require a form.  Perhaps any use of @name would generate the appropriate model, instance, and binds...

*Thomas:* The document is updated to reflect the form is not necessary the root element for streamlined syntax.

2. Can we find a way to do the instance and bind generation that doesn't require a global binding information stack?  This processing model seems a bit "batch oriented"...i.e. has both a centralized stack and defers instance/bind creation to a centralized object and point of time...can this be broken up and placed directly on the streamlined behavior object -- just executed at the appropriate time???  I'm thinking this would help in the case where we're doing dynamic control creation, e.g. for repeats or just under script control, during page execution.  The logic for cooking up a new instance and bind, and wiring things up would need to be incrementally executable in that case too...

*Thomas:* 
After our discussion and putting more thought on the issue, I think this is more an issue on what do we want the streamlined xforms processing model to be. From my understand XForms preocessing is always done in a batch ways. 

One example to illustrate the batch nature of XForms is 
if an user uses the getInstanceDocument to retrieve an instance of XForms model, and use DOM method to update the instance document, all the changes from the instance is not applied to the views until the developer explicit make a call on the model to rebuild, recalculate, revalidate, refresh.

Another example is if user uses script to dynamic create one or more bind elements and insert it to the model. The bind element won't be applied to the model until the user explicit make a call on the model to rebuild, recalculate, revalidate, refresh.

There is no automatic update in the original XForms processing model, and I would assume that there's reasons why the spec is written this way. 
So, the question is do we want to introduce this new feature to the streamlined syntax.

Drawing a parallel from the streamlined syntax, dynamicly create a streamlined input element is equivanlent to the following actions in the xforms:
  # Create an XForms input
  # Modify the instance document using the DOM
  # Add a bind/calculate/constriant to the model
Action 2 and 3 effectively modify the XForms model, and the model requires rebuild, recalculate, revalidate, refresh. So now the questions are the following:
  * Does the streamlined syntax automaticlly perform the rebuild, recalculate, revalidate, refresh actions?
  * Should it behaves the same within both HTML namespace and XForms namespace?



= Details =

For a quick implementation of the streamlined syntax, we purpose the followings:

1.  Add the decorator, and implement for the new streamlined elements:
  * form 

2. Add the decorator rules for the following elements with a *name* attribute, and
the first element with the name attribute will create an empty model for the streamlined form. (the name attribute is used as an identifier of streamlined element)
  * group 
  * input
  * hidden
  * output
  * submit
3. Design and implement a Streamlined Behavior Object which attached to all streamlined elements and performs the following:
  * Generate the referenced node in the instance
  * Extract the bindings, calculations, constriants information from the element and store it in a *binding information stack*.
4. After the model is created and the document is processed, 
  * Add the generated instance to the model
  * Generate all the bindings from the *binding information stack* and attached it to the model.

= Future Work Item =
The above design should provide the basic features of the streamlined syntax,
then we will look into how to  provide support for [WorkItemSupportHtmlInput Streamlined Syntax elements in HTML namespace].