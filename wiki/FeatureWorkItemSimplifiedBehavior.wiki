#summary Adding Streamlined Syntax to Ubiquity XForms Library
#labels Feature,StreamLinedSyntax,WorkItem

= Introduction =

Add support of the [StorySimplifiedSyntax streamlined syntax] to the Ubiquity XForms's namespace

Questions/comments from Charlie:

1. Do we want to *require* a form element in order to create the model, submission, and instance?  I believe some use cases for streamlined syntax, particularly when used in the xforms namespace, won't require a form.  Perhaps any use of @name would generate the appropriate model, instance, and binds...

2. Can we find a way to do the instance and bind generation that doesn't require a global binding information stack?  This processing model seems a bit "batch oriented"...i.e. has both a centralized stack and defers instance/bind creation to a centralized object and point of time...can this be broken up and placed directly on the streamlined behavior object -- just executed at the appropriate time???  I'm thinking this would help in the case where we're doing dynamic control creation, e.g. for repeats or just under script control, during page execution.  The logic for cooking up a new instance and bind, and wiring things up would need to be incrementally executable in that case too...


= Details =

For a quick implementation of the streamlined syntax, we purpose the followings:

1.  Add the decorator, and implement for the new streamlined elements:
  * form - it generates an empty model for the streamlined form.
2. Add the decorator rules for the following elements with a *name* attribute (the name attribute is used as an identifier of streamlined element)
  * group 
  * input
  * hidden
  * output
  * submit
3. Design and implement a Streamlined Behavior Object which attached to all streamlined elements and performs the following:
  * Generate the referenced node in the instance
  * Extract the bindings, calculations, constriants information from the element and store it in a *binding information stack*.
4. After the model is created and the document is processed, 
  * Add the generated instance to the model
  * Generate all the bindings from the *binding information stack* and attached it to the model.

= Future Work Item =
The above design should provide the basic features of the streamlined syntax,
then we will look into how to  provide support for [WorkItemSupportHtmlInput Streamlined Syntax elements in HTML namespace].